from cv2 import cv2
import os
import math
import numpy as np

def get_path_list(root_path):

    '''
        To get a list of path directories from root path

        Parameters
        ----------
        root_path : str
            Location of root directory
        
        Returns
        -------
        list
            List containing the names of each person
    '''

    person_name = os.listdir(root_path)

    return person_name

def get_class_id(root_path, train_names):

    '''
        To get a list of train images and a list of image classes id

        Parameters
        ----------
        root_path : str
            Location of images root directory
        train_names : list
            List containing the names of the train sub-directories
        
        Returns
        -------
        list
            List containing all image in the train directories
        list
            List containing all image classes id
    '''

    image_list = []
    image_classes_list = []

    for index, name in enumerate(train_names):
        subfolder_path = root_path + '/' + name

        for image_name in os.listdir(subfolder_path):
            image_path = subfolder_path + '/' + image_name

            face_img = cv2.imread(image_path)

            image_list.append(face_img)
            image_classes_list.append(index)
    
    return image_list, image_classes_list

def detect_train_faces_and_filter(image_list, image_classes_list):
    '''
        To detect a face from given image list and filter it if the face on
        the given image is less than one

        Parameters
        ----------
        image_list : list
            List containing all loaded images
        image_classes_list : list
            List containing all image classes id
        
        Returns
        -------
        list
            List containing all filtered and cropped face images in grayscale
        list
            List containing all filtered image classes id
    '''
    train_face_grays = []
    train_face_grays_class = []

    face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')

    for index, name in enumerate(image_list):
        image_gray = cv2.cvtColor(name, cv2.COLOR_BGR2GRAY)

        face_detected = face_cascade.detectMultiScale(image_gray, 1.3, 5)

        if(len(face_detected) < 1):
            continue
        
        for test_faces_rects in face_detected:
            x,y,w,h = test_faces_rects
            crop_image = image_gray[y:y+h, x:x+w]

            train_face_grays.append(crop_image)
            train_face_grays_class.append(image_classes_list[index])

    return train_face_grays, train_face_grays_class
  
def detect_test_faces_and_filter(image_list):
    '''
        To detect a face from given image list and filter it if the face on
        the given image is less than one

        Parameters
        ----------
        image_list : list
            List containing all loaded images
        
        Returns
        -------
        list
            List containing all filtered and cropped face images in grayscale
        list
            List containing all filtered faces location saved in rectangle
    '''
    test_images_grays = []
    test_images_rect = []
    
    face_cascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')

    for image_name in image_list:
        image_gray = cv2.cvtColor(image_name, cv2.COLOR_BGR2GRAY)

        face_detected = face_cascade.detectMultiScale(image_gray, 1.3, 5)

        if(len(face_detected) < 1):
            continue
        
        for test_faces_rects in face_detected:
            x,y,w,h = test_faces_rects
            test_faces_gray = image_gray[y:y+h, x:x+w]

            test_images_grays.append(test_faces_gray)
            test_images_rect.append(test_faces_rects)

    return test_images_grays, test_images_rect

def train(train_face_grays, image_classes_list):
    '''
        To create and train face recognizer object

        Parameters
        ----------
        train_face_grays : list
            List containing all filtered and cropped face images in grayscale
        image_classes_list : list
            List containing all filtered image classes id
        
        Returns
        -------
        object
            Recognizer object after being trained with cropped face images
    '''

    face_recognizer = cv2.face.LBPHFaceRecognizer_create()
    face_recognizer.train(train_face_grays, np.array(image_classes_list))

    return face_recognizer

def get_test_images_data(test_root_path):
    '''
        To load a list of test images from given path list

        Parameters
        ----------
        test_root_path : str
            Location of images root directory
        
        Returns
        -------
        list
            List containing all image in the test directories
    '''
    test_images = []

    for image_name in os.listdir(test_root_path):
        image_path = test_root_path + '/' + image_name
        image = cv2.imread(image_path)

        test_images.append(image)

    return test_images
    
def predict(recognizer, test_faces_gray):
    '''
        To predict the test image with the recognizer

        Parameters
        ----------
        recognizer : object
            Recognizer object after being trained with cropped face images
        test_faces_gray : list
            List containing all filtered and cropped face images in grayscale

        Returns
        -------
        list
            List containing all prediction results from given test faces
    '''
    prediction_result = []

    for image_name in test_faces_gray:
        res, confidence = recognizer.predict(image_name)
        prediction_result.append(res)

    return prediction_result

def draw_prediction_results(predict_results, test_image_list, test_faces_rects, train_names, size):
    '''
        To draw prediction results on the given test images and resize the image

        Parameters
        ----------
        predict_results : list
            List containing all prediction results from given test faces
        test_image_list : list
            List containing all loaded test images
        test_faces_rects : list
            List containing all filtered faces location saved in rectangle
        train_names : list
            List containing the names of the train sub-directories
        size : number
            Final size of each test image

        Returns
        -------
        list
            List containing all test images after being drawn with
            final result
    '''

    final_result = []

    width = size
    height = size

    dimension = (width, height)

    for index, name in enumerate(test_image_list):
        x,y,h,w = test_faces_rects[index]
        text = train_names[predict_results[index]]

        cv2.putText(name, text, (x, y - 10), cv2.FONT_HERSHEY_PLAIN, 2, (255,0,0), 2)
        cv2.rectangle(name, (x,y), (x+w, y+h), (255,0,0), 2)

        new_image = cv2.resize(name, dimension)

        final_result.append(new_image)

    return final_result

def combine_and_show_result(image_list, size):
    '''
        To show the final image that already combine into one image

        Parameters
        ----------
        image_list : nparray
            Array containing image data
        size : number
            Final size of each test image
    '''

    new_array = np.array(image_list)

    image_combined = new_array[0]

    for index, name in enumerate(new_array):
        if(index == 0):
            continue
        else:
            image_combined = np.hstack((image_combined, name))

    cv2.imshow('', image_combined)
    cv2.waitKey(0)
'''
You may modify the code below if it's marked between

-------------------
Modifiable
-------------------

and

-------------------
End of modifiable
-------------------
'''

if __name__ == "__main__":

    '''
        Please modify train_root_path value according to the location of
        your data train root directory

        -------------------
        Modifiable
        -------------------
    '''
    train_root_path = "dataset/train"
    '''
        -------------------
        End of modifiable
        -------------------
    '''

    train_names = get_path_list(train_root_path)
    train_image_list, image_classes_list = get_class_id(train_root_path, train_names)
    train_face_grays, filtered_classes_list = detect_train_faces_and_filter(train_image_list, image_classes_list)
    recognizer = train(train_face_grays, filtered_classes_list)

    '''
        Please modify train_root_path value according to the location of
        your data train root directory

        -------------------
        Modifiable
        -------------------
    '''
    test_root_path = "dataset/test"
    '''
        -------------------
        End of modifiable
        -------------------
    '''

    test_image_list = get_test_images_data(test_root_path)
    test_faces_gray, test_faces_rects = detect_test_faces_and_filter(test_image_list)
    predict_results = predict(recognizer, test_faces_gray)
    predicted_test_image_list = draw_prediction_results(predict_results, test_image_list, test_faces_rects, train_names, 200)
    
    combine_and_show_result(predicted_test_image_list, 200)
